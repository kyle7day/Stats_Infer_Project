grep("tBodyAcc", fields[10,1])
for(i in 1:nrow(fields)){
if(grep("tBodyAcc", fields[i,1]){
fields[i,3] <- "tBodyAcc-XYZ"}
if(grep("tGravityAcc", fields[i,1]){
fields[i,3] <- "tGravityAcc-XYZ"}
if(grep("tBodyAccJerk", fields[i,1]){
fields[i,3] <- "tBodyAccJerk-XYZ"}
if(grep("tBodyGyro", fields[i,1]){
fields[i,3] <- "tBodyGyro-XYZ"}
if(grep("tBodyGyroJerk", fields[i,1]){
fields[i,3] <- "tBodyGyroJerk-XYZ"}
if(grep("tBodyAccMag", fields[i,1]){
fields[i,3] <- "tBodyAccMag"}
if(grep("ttGravityAccMag", fields[i,1]){
fields[i,3] <- "tGravityAccMag"}
if(grep("tBodyAccJerkMag", fields[i,1]){
fields[i,3] <- "tBodyAccJerkMag"}
if(grep("tBodyGyroMag", fields[i,1]){
fields[i,3] <- "tBodyGyroMag"}
if(grep("tBodyGyroJerkMag", fields[i,1]){
fields[i,3] <- "tBodyGyroJerkMag"}
if(grep("fBodyAcc", fields[i,1]){
fields[i,3] <- "fBodyAcc-XYZ"}
if(grep("fBodyAccJerk", fields[i,1]){
fields[i,3] <- "fBodyAccJerk-XYZ"}
if(grep("fBodyGyro", fields[i,1],){
fields[i,3] <- "fBodyGyro-XYZ"}
if(grep("fBodyAccMag", fields[i,1]){
fields[i,3] <- "fBodyAccMag"}
if(grep("fBodyAccJerkMag", fields[i,1]){
fields[i,3] <- "fBodyAccJerkMag"}
if(grep("fBodyGyroMag", fields[i,1]){
fields[i,3] <- "fBodyGyroMag"}
if(grep("fBodyGyroJerkMag", fields[i,1]){
fields[i,3] <- "fBodyGyroJerkMag"}
}
for(i in 1:nrow(fields)){
if(grep("tBodyAcc", fields[i,1])){
fields[i,3] <- "tBodyAcc-XYZ"}
if(grep("tGravityAcc", fields[i,1])){
fields[i,3] <- "tGravityAcc-XYZ"}
if(grep("tBodyAccJerk", fields[i,1])){
fields[i,3] <- "tBodyAccJerk-XYZ"}
if(grep("tBodyGyro", fields[i,1])){
fields[i,3] <- "tBodyGyro-XYZ"}
if(grep("tBodyGyroJerk", fields[i,1])){
fields[i,3] <- "tBodyGyroJerk-XYZ"}
if(grep("tBodyAccMag", fields[i,1])){
fields[i,3] <- "tBodyAccMag"}
if(grep("ttGravityAccMag", fields[i,1])){
fields[i,3] <- "tGravityAccMag"}
if(grep("tBodyAccJerkMag", fields[i,1])){
fields[i,3] <- "tBodyAccJerkMag"}
if(grep("tBodyGyroMag", fields[i,1])){
fields[i,3] <- "tBodyGyroMag"}
if(grep("tBodyGyroJerkMag", fields[i,1])){
fields[i,3] <- "tBodyGyroJerkMag"}
if(grep("fBodyAcc", fields[i,1])){
fields[i,3] <- "fBodyAcc-XYZ"}
if(grep("fBodyAccJerk", fields[i,1])){
fields[i,3] <- "fBodyAccJerk-XYZ"}
if(grep("fBodyGyro", fields[i,1],)){
fields[i,3] <- "fBodyGyro-XYZ"}
if(grep("fBodyAccMag", fields[i,1])){
fields[i,3] <- "fBodyAccMag"}
if(grep("fBodyAccJerkMag", fields[i,1])){
fields[i,3] <- "fBodyAccJerkMag"}
if(grep("fBodyGyroMag", fields[i,1])){
fields[i,3] <- "fBodyGyroMag"}
if(grep("fBodyGyroJerkMag", fields[i,1])){
fields[i,3] <- "fBodyGyroJerkMag"}
}
fields
grep("tBodyAcc", fields[10,1])
grep("tBodyAcc", fields[1,1])
grep("tBodyAcc", fields[10,1], perl = TRUE)
grep("tBodyAcc", fields[10,1], fixed = TRUE)
grep1("tBodyAcc", fields[10,1])
grepl("tBodyAcc", fields[10,1])
grepl("tBodyAcc", fields[1,1])
for(i in 1:nrow(fields)){
if(grepl("tBodyAcc", fields[i,1])){
fields[i,3] <- "tBodyAcc-XYZ"}
if(grepl("tGravityAcc", fields[i,1])){
fields[i,3] <- "tGravityAcc-XYZ"}
if(grepl("tBodyAccJerk", fields[i,1])){
fields[i,3] <- "tBodyAccJerk-XYZ"}
if(grepl("tBodyGyro", fields[i,1])){
fields[i,3] <- "tBodyGyro-XYZ"}
if(grepl("tBodyGyroJerk", fields[i,1])){
fields[i,3] <- "tBodyGyroJerk-XYZ"}
if(grepl("tBodyAccMag", fields[i,1])){
fields[i,3] <- "tBodyAccMag"}
if(grepl("ttGravityAccMag", fields[i,1])){
fields[i,3] <- "tGravityAccMag"}
if(grepl("tBodyAccJerkMag", fields[i,1])){
fields[i,3] <- "tBodyAccJerkMag"}
if(grepl("tBodyGyroMag", fields[i,1])){
fields[i,3] <- "tBodyGyroMag"}
if(grepl("tBodyGyroJerkMag", fields[i,1])){
fields[i,3] <- "tBodyGyroJerkMag"}
if(grepl("fBodyAcc", fields[i,1])){
fields[i,3] <- "fBodyAcc-XYZ"}
if(grepl("fBodyAccJerk", fields[i,1])){
fields[i,3] <- "fBodyAccJerk-XYZ"}
if(grepl("fBodyGyro", fields[i,1],)){
fields[i,3] <- "fBodyGyro-XYZ"}
if(grepl("fBodyAccMag", fields[i,1])){
fields[i,3] <- "fBodyAccMag"}
if(grepl("fBodyAccJerkMag", fields[i,1])){
fields[i,3] <- "fBodyAccJerkMag"}
if(grepl("fBodyGyroMag", fields[i,1])){
fields[i,3] <- "fBodyGyroMag"}
if(grepl("fBodyGyroJerkMag", fields[i,1])){
fields[i,3] <- "fBodyGyroJerkMag"}
}
fields
names(mean_sd_data)
?replace
if(grepl(names(mean_sd_data)[74], "BodyBody"){
names(mean_sd_data)[74] <- replace("BodyBody", names(mean_sd_data)[74], "Body")
}
if(grepl(names(mean_sd_data)[74], "BodyBody")){
names(mean_sd_data)[74] <- replace("BodyBody", names(mean_sd_data)[74], "Body")
}
names(mean_sd_data)
if(grepl(names(mean_sd_data)[i], "BodyBody")){
names(mean_sd_data)[i] <- replace(names(mean_sd_data)[i], "BodyBody", "Body")
}
if(grepl(names(mean_sd_data)[75], "BodyBody")){
names(mean_sd_data)[75] <- replace(names(mean_sd_data)[75], "BodyBody", "Body")
}
names(mean_sd_data)
if(grepl(names(mean_sd_data)[75], "BodyBody")){
names(mean_sd_data)[75] <- replace(names(mean_sd_data)[75], "BodyBody", "Body")
}
names(mean_sd_data)
if(grepl(names(mean_sd_data)[75], "BodyBody")){
replace(names(mean_sd_data)[75], "BodyBody", "Body")
}
names(mean_sd_data)
?gsub
if(grepl(names(mean_sd_data)[75], "BodyBody")){
names(mean_sd_data)[75] <- sub("BodyBody", "Body", names(mean_sd_data)[75])
}
names(mean_sd_data)
if(grepl(names(mean_sd_data)[75], "BodyBody")){
names(mean_sd_data)[75] <- sub("BodyBody", "Body", names(mean_sd_data)[75], fixed = TRUE)
}
names(mean_sd_data)
grepl(names(mean_sd_data)[75], "BodyBody")
names(mean_sd_data)[75] <- sub("BodyBody", "Body", names(mean_sd_data)[75])
names(mean_sd_data)
for(i in 1:nrow(names(mean_sd_data))){
names(mean_sd_data)[i] <- sub("BodyBody", "Body", names(mean_sd_data)[i])
}
for(i in 1:ncol(mean_sd_data)){
names(mean_sd_data)[i] <- sub("BodyBody", "Body", names(mean_sd_data)[i])
}
names(mean_sd_data)
source('C:/Coursera/Getting_Data/Getting_Data_Project/run_analysis.R')
tidydata_l1 <- read.table("tidydata.txt", header = TRUE, nrows = 3)
##We really just need the names, but doesn't hurt to see a few lines.
fieldnames <- names(tidydata_l1)
table
fields <- data.frame(fieldnames)
##"This field repersents the average ---- vaules of the subject while in the ----- activity."
##This will create a column for the Activity that we will use later
for(i in 1:nrow(fields)){
if(pmatch("Laying", fields[i,1], nomatch = "0")){
fields[i,2] <- "Laying"}
if(pmatch("Sitting", fields[i,1], nomatch = "0")){
fields[i,2] <- "Sitting"}
if(pmatch("Standing", fields[i,1], nomatch = "0")){
fields[i,2] <- "Standing"}
if(pmatch("Walking", fields[i,1], nomatch = "0")){
fields[i,2] <- "Walking"}
if(pmatch("WalkDown", fields[i,1], nomatch = "0")){
fields[i,2] <- "Walking Downstairs"}
if(pmatch("WalkUp", fields[i,1], nomatch = "0")){
fields[i,2] <- "Walking Upstairs"}
}
##the first row is a suject line, so lets remove it
fields <- fields[2:nrow(fields), ]
##This next for loop will be similar to the last, but will look for/create the vector.
## grepl is the logical of grep, which checks to see if a value is present the data.
for(i in 1:nrow(fields)){
if(grepl("tBodyAcc", fields[i,1])){
fields[i,3] <- "tBodyAcc-XYZ"}
if(grepl("tGravityAcc", fields[i,1])){
fields[i,3] <- "tGravityAcc-XYZ"}
if(grepl("tBodyAccJerk", fields[i,1])){
fields[i,3] <- "tBodyAccJerk-XYZ"}
if(grepl("tBodyGyro", fields[i,1])){
fields[i,3] <- "tBodyGyro-XYZ"}
if(grepl("tBodyGyroJerk", fields[i,1])){
fields[i,3] <- "tBodyGyroJerk-XYZ"}
if(grepl("tBodyAccMag", fields[i,1])){
fields[i,3] <- "tBodyAccMag"}
if(grepl("ttGravityAccMag", fields[i,1])){
fields[i,3] <- "tGravityAccMag"}
if(grepl("tBodyAccJerkMag", fields[i,1])){
fields[i,3] <- "tBodyAccJerkMag"}
if(grepl("tBodyGyroMag", fields[i,1])){
fields[i,3] <- "tBodyGyroMag"}
if(grepl("tBodyGyroJerkMag", fields[i,1])){
fields[i,3] <- "tBodyGyroJerkMag"}
if(grepl("fBodyAcc", fields[i,1])){
fields[i,3] <- "fBodyAcc-XYZ"}
if(grepl("fBodyAccJerk", fields[i,1])){
fields[i,3] <- "fBodyAccJerk-XYZ"}
if(grepl("fBodyGyro", fields[i,1],)){
fields[i,3] <- "fBodyGyro-XYZ"}
if(grepl("fBodyAccMag", fields[i,1])){
fields[i,3] <- "fBodyAccMag"}
if(grepl("fBodyAccJerkMag", fields[i,1])){
fields[i,3] <- "fBodyAccJerkMag"}
if(grepl("fBodyGyroMag", fields[i,1])){
fields[i,3] <- "fBodyGyroMag"}
if(grepl("fBodyGyroJerkMag", fields[i,1])){
fields[i,3] <- "fBodyGyroJerkMag"}
if(grepl("gravityMean", fields[i,1])){
fields[i,3] <- "fgravityMean"}
if(grepl("tBodyAccMean", fields[i,1])){
fields[i,3] <- "tBodyAccMean"}
if(grepl("tBodyAccJerkMean", fields[i,1])){
fields[i,3] <- "tBodyAccJerkMean"}
if(grepl("tBodyGyroMean", fields[i,1])){
fields[i,3] <- "tBodyGyroMean"}
if(grepl("fBodyGyroJerkMag", fields[i,1])){
fields[i,3] <- "tBodyGyroJerkMean"}
}
fields
fields[1,4] <- print("This field repersents the average", fields[1,3], "of the subject while in the", fields[1,2], "activity.", sep = " ")
fields[1,3]
for(i in 1:nrow(fields)){
fields[i,4] <- print("This field repersents the average", fields[i,3], "of the subject while in the", fields[i,2], "activity.", sep = " ")
}
?print
lapply(fields, class)
fields[1,4] <- paste("This field repersents the average", fields[1,3], "of the subject while in the", fields[1,2], "activity.", sep = " ")
fields
for(i in 1:nrow(fields)){
fields[i,4] <- paste("This field repersents the average", fields[i,3], "value of the subject while in the", fields[i,2], "activity.", sep = " ")
}
head(fields)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
fields[1:6,]
fields[,4]
fields[,c(1,4)]
source('~/.active-rstudio-document', echo=TRUE)
fields[,c(1,4)]
fields[,c(1,5)]
fields[,5]
fields[,c(1,4)]
?grepl
source('~/.active-rstudio-document', echo=TRUE)
body
head(body)
source('~/.active-rstudio-document', echo=TRUE)
head(body)
names(body) <- c("Field Name", "Discription"")
"'"
names(body) <- c("Field Name", "Discription")
head(body)
source('~/.active-rstudio-document', echo=TRUE)
?write.table
?cat
library(pander)
install.packages("pander")
?pander
?cat
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
setwd("C:/Coursera/Stat_Infer/Stats_Infer_Project")
?runif
?set.seed
set.seed(101)
?rexp
?matrix
rexp(40, lambda)
lambda <- 0.2   ##We're told to keep Lambda at 0.2
n <- 40         ##means generated off of sample size 40
sims <- 1000    ## we need 1000 simulations
set.seed(101)   ##needed so that data is reproducible
simdata <- rexp(40, lambda)
data <- rexp(40, lambda)
data
for(i in 1:1000){
data[i,1] <- rexp(40, lambda)
}
?matrix
data <- matrix()
for(i in 1:1000){
data[i,1] <- rexp(40, lambda)
}
data <- matrix(rexp(40, lambda), sims)
data
lambda <- 0.2   ##We're told to keep Lambda at 0.2
n <- 40         ##means generated off of sample size 40
sims <- 1000    ## we need 1000 simulations
set.seed(99)   ##needed so that data is reproducible
##create the simulation data
data <- matrix(rexp(n*sims, lambda), sims)
data
head(data)
source('~/.active-rstudio-document', echo=TRUE)
head(data)
data[1:6,2]
View(data)
data[i,] <- mean(data[i,1])
mean_data[i,1] <- mean(data[i,])
data
source('~/.active-rstudio-document', echo=TRUE)
data
mean_data
mean_data
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mean_data
head(mean_data)
hist(mean_data)
hist(mean_data[,1])
class(mean_data[,1])
class(mean_data)
?hist
source('~/.active-rstudio-document', echo=TRUE)
actual_mean <- mean(mean_data[,1])
actual_mean
var(mean_data[,1])
(1/lambda)^2/n
ggplot(mean_data, aes(x = mean_data))
library(ggplot)
install.packages("ggplot")
library(ggplot)
plot(mean_data)
?aes
?curve
actual_sd <- sd(mean_data[,1])
?dnorm
hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40 Exponentials")
## Then lets calculate a few need peices of information.
##we already have our mean, but what of our Standard Deviation.
actual_sd <- sd(mean_data[,1])
curve(dnorm(mean_data))
curve(dnorm(x, mean = actual_mean, sd = actual_sd))
curve(dnorm(x, mean = actual_mean, sd = actual_sd),
col="darkblue", lwd=2, add=TRUE, yaxt="n")
hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40 Exponentials")
## Then lets calculate a few need peices of information.
##we already have our mean, but what of our Standard Deviation.
actual_sd <- sd(mean_data[,1])
curve(dnorm(x, mean = actual_mean, sd = actual_sd))
dnorm(x, mean = actual_mean, sd = actual_sd)
hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40 Exponentials")
## Then lets calculate a few need peices of information.
##we already have our mean, but what of our Standard Deviation.
actual_sd <- sd(mean_data[,1])
lines(dnorm(x, mean = actual_mean, sd = actual_sd))
lines(density(mean_data))
lines(density(mean_data[,1]))
lines(dnorm(mean_data[,1], mean = actual_mean, sd = actual_sd))
hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40 Exponentials")
## Then lets calculate a few need peices of information.
##we already have our mean, but what of our Standard Deviation.
actual_sd <- sd(mean_data[,1])
lines(dnorm(mean_data[,1], mean = actual_mean, sd = actual_sd))
mult <- data_plot$counts/data_plot$density
data_plot <- hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40
}
""
)
`
)
))))
*
data_plot <- hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40 Exponentials")
mult <- data_plot$counts/data_plot$density
data_plot <- hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40 Exponentials")
## Then lets calculate a few need peices of information.
##we already have our mean, but what of our Standard Deviation.
actual_sd <- sd(mean_data[,1])
norm <- dnorm(mean_data[,1], mean = actual_mean, sd = actual_sd))
##before we graph or line we need to know how much to scale by.
multi <- data_plot$counts/data_plot$density
lines(mean_data[,1], norm * multi[1])
```
norm <- dnorm(mean_data[,1], mean = actual_mean, sd = actual_sd)
##before we graph or line we need to know how much to scale by.
multi <- data_plot$counts/data_plot$density
lines(mean_data[,1], norm * multi[1])
?seq
data_plot <- hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40 Exponentials")
## Then lets calculate a few need peices of information.
##we already have our mean, but what of our Standard Deviation.
actual_sd <- sd(mean_data[,1])
##before we create our approximation of our normal we need an x vaule
## to get our x we are you to create a seqence of 100 point from our min to our max.
x <- seq(min(mean_data[,1]), max(mean_data[,1]), length.out= 100)
norm <- dnorm(x, mean = actual_mean, sd = actual_sd)
##before we graph or line we need to know how much to scale by.
multi <- data_plot$counts/data_plot$density
lines(mean_data[,1], norm * multi[1])
data_plot <- hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40 Exponentials")
## Then lets calculate a few need peices of information.
##we already have our mean, but what of our Standard Deviation.
actual_sd <- sd(mean_data[,1])
##before we create our approximation of our normal we need an x vaule
## to get our x we are you to create a seqence of 100 point from our min to our max.
x <- seq(min(mean_data[,1]), max(mean_data[,1]), length.out= 100)
norm <- dnorm(x, mean = actual_mean, sd = actual_sd)
##before we graph or line we need to know how much to scale by.
multi <- data_plot$counts/data_plot$density
lines(x, norm * multi[1])
?hist
data_plot <- hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40 Exponentials", breaks = 20)
## Then lets calculate a few need peices of information.
##we already have our mean, but what of our Standard Deviation.
actual_sd <- sd(mean_data[,1])
##before we create our approximation of our normal we need an x vaule
## to get our x we are you to create a seqence of 100 point from our min to our max.
x <- seq(min(mean_data[,1]), max(mean_data[,1]), length.out= 100)
norm <- dnorm(x, mean = actual_mean, sd = actual_sd)
##before we graph or line we need to know how much to scale by.
multi <- data_plot$counts/data_plot$density
lines(x, norm * multi[1])
##first lets show our data, but i want to see more granularity so
data_plot <- hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40 Exponentials", breaks = 30)
## Then lets calculate a few need peices of information.
##we already have our mean, but what of our Standard Deviation.
actual_sd <- sd(mean_data[,1])
##before we create our approximation of our normal we need an x vaule
## to get our x we are you to create a seqence of 100 point from our min to our max.
x <- seq(min(mean_data[,1]), max(mean_data[,1]), length.out= 100)
norm <- dnorm(x, mean = actual_mean, sd = actual_sd)
##before we graph or line we need to know how much to scale by.
multi <- data_plot$counts/data_plot$density
lines(x, norm * multi[1])
data_plot <- hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40 Exponentials", breaks = 30)
## Then lets calculate a few need peices of information.
##we already have our mean, but what of our Standard Deviation.
actual_sd <- sd(mean_data[,1])
##before we create our approximation of our normal we need an x vaule
## to get our x we are you to create a seqence of 100 point from our min to our max.
x <- seq(min(mean_data[,1]), max(mean_data[,1]), length.out= 100)
norm <- dnorm(x, mean = actual_mean, sd = actual_sd)
##before we graph or line we need to know how much to scale by.
multi <- data_plot$counts/data_plot$density
lines(x, norm * multi[1])
##first lets show our data, but i want to see more granularity so
data_plot <- hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40 Exponentials", breaks = 40)
## Then lets calculate a few need peices of information.
##we already have our mean, but what of our Standard Deviation.
actual_sd <- sd(mean_data[,1])
##before we create our approximation of our normal we need an x vaule
## to get our x we are you to create a seqence of 100 point from our min to our max.
x <- seq(min(mean_data[,1]), max(mean_data[,1]), length.out= 100)
norm <- dnorm(x, mean = actual_mean, sd = actual_sd)
##before we graph or line we need to know how much to scale by.
multi <- data_plot$counts/data_plot$density
lines(x, norm * multi[1])
##first lets show our data, but i want to see more granularity so
data_plot <- hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40 Exponentials", breaks = 35)
## Then lets calculate a few need peices of information.
##we already have our mean, but what of our Standard Deviation.
actual_sd <- sd(mean_data[,1])
##before we create our approximation of our normal we need an x vaule
## to get our x we are you to create a seqence of 100 point from our min to our max.
x <- seq(min(mean_data[,1]), max(mean_data[,1]), length.out= 100)
norm <- dnorm(x, mean = actual_mean, sd = actual_sd)
##before we graph or line we need to know how much to scale by.
multi <- data_plot$counts/data_plot$density
lines(x, norm * multi[1])
##first lets show our data, but i want to see more granularity so
data_plot <- hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40 Exponentials", breaks = 35)
## Then lets calculate a few need peices of information.
##we already have our mean, but what of our Standard Deviation.
actual_sd <- sd(mean_data[,1])
##before we create our approximation of our normal we need an x vaule
## to get our x we are you to create a seqence of 100 point from our min to our max.
x <- seq(min(mean_data[,1]), max(mean_data[,1]), length.out= 100)
norm <- dnorm(x, mean = actual_mean, sd = actual_sd)
##before we graph or line we need to know how much to scale by.
multi <- data_plot$counts/data_plot$density
lines(x, norm * multi[1])
data_plot <- hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40 Exponentials", breaks = 30)
## Then lets calculate a few need peices of information.
##we already have our mean, but what of our Standard Deviation.
actual_sd <- sd(mean_data[,1])
##before we create our approximation of our normal we need an x vaule
## to get our x we are you to create a seqence of 100 point from our min to our max.
x <- seq(min(mean_data[,1]), max(mean_data[,1]), length.out= 100)
norm <- dnorm(x, mean = actual_mean, sd = actual_sd)
##before we graph or line we need to know how much to scale by.
multi <- data_plot$counts/data_plot$density
lines(x, norm * multi[1])
data_plot <- hist(mean_data[,1], xlab = "Mean", main = "Histogram of Means from 40 Exponentials", breaks = 25)
## Then lets calculate a few need peices of information.
##we already have our mean, but what of our Standard Deviation.
actual_sd <- sd(mean_data[,1])
##before we create our approximation of our normal we need an x vaule
## to get our x we are you to create a seqence of 100 point from our min to our max.
x <- seq(min(mean_data[,1]), max(mean_data[,1]), length.out= 100)
norm <- dnorm(x, mean = actual_mean, sd = actual_sd)
##before we graph or line we need to know how much to scale by.
multi <- data_plot$counts/data_plot$density
lines(x, norm * multi[1])
